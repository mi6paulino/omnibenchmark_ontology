# query deliverables with parameters from benchmark1

PREFIX omni: <http://omnibenchmark.org/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?b ?module ?mod2name ?deliverable ?epoch ?kw ?ikw ?fn ?pn ?pv
where {
   ?deliverable a omni:Deliverable ;
   	          omni:hasModuleName ?module ;
                  omni:hasEpoch ?epoch ;
                  omni:hasFileName ?fn  ;
                  omni:hasLfsHash ?lfs .
  ?mod2 a omni:Module ;
                  omni:belongsToBenchmark ?b;
                  omni:hasModuleName ?mod2name ;
                  omni:hasInputKeyword ?ikw ;
                  omni:hasKeyword ?kw .    
  OPTIONAL {?params a omni:NamedParameter;
                  omni:hasParameterName ?pn ;
                  omni:hasParameterValue ?pv ;
                  omni:appliesToDeliverable ?param_targetfn }
  
  FILTER (?epoch="epoch1"^^xsd:string  &&
          ?module = ?mod2name &&
          ?b="benchmark1"^^xsd:string &&
    	  ?fn = ?param_targetfn
          ) 
 
}

# query modules from benchmark1

PREFIX omni: <http://omnibenchmark.org/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?b ?mod ?mod2name
where {

  ?mod a omni:Module ;
                  omni:belongsToBenchmark ?b;
                  omni:hasModuleName ?mod2name ;
                  omni:hasInputKeyword ?ikw ;
                  omni:hasKeyword ?kw .    
  FILTER (?b="benchmark1"^^xsd:string)
 
}

# query deliverables and their epochs for modules belonging to benchmark1

PREFIX schema: <http://schema.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX renku: <https://swissdatasciencecenter.github.io/renku-ontology#>
PREFIX omni: <http://omnibenchmark.org/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?b ?module ?deliverable ?epoch  ?fn 
where {
   ?deliverable a omni:Deliverable ;
   	          omni:hasModuleName ?module ;
                  omni:hasEpoch ?epoch ;
                  omni:hasFileName ?fn  .
  ?mod2 a omni:Module ;
                  omni:belongsToBenchmark ?b;
                  omni:hasModuleName ?mod2name .    
  FILTER (?epoch="epoch1"^^xsd:string  &&
          ?module = ?mod2name &&
          ?b="benchmark1"^^xsd:string)  
}



# query deliverables generated by a given activity id

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX omni: <http://omnibenchmark.org/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select *
where {
   ?deliverable a omni:Deliverable ;
   	          omni:hasModuleName ?module  ;
                  omni:hasFileName ?fn  .
  
  optional { ?deliverable omni:hasActivity ?act }

  FILTER (?act="activity_method2"^^xsd:string)
}


# get file provenances (one hop back), via module's keywords

PREFIX omni: <http://omnibenchmark.org/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?ikw1 ?pre_mod ?pre_fn ?post_mod ?post_fn
where {
  ?module_pre a omni:Module ;
  omni:hasModuleName ?pre_mod ;
                      omni:hasKeyword ?ikw1 .
  ?module_post a omni:Module;
                 omni:hasModuleName ?post_mod ;
                 omni:hasInputKeyword ?ikw1 .

  ?d_pre a omni:Deliverable ;
                 omni:hasModuleName ?pre_mod ;
                 omni:hasFileName ?pre_fn .
  ?d_post a omni:Deliverable ;
                 omni:hasModuleName ?post_mod ;
                 omni:hasFileName ?post_fn .
   
}

# get file provenances, recursive

PREFIX omni: <http://omnibenchmark.org/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?target_module_name ?target_kw ?recursive_module_name ?kw ?predecessor_module_name
where {
  ?target_module a omni:Module ;
    omni:hasModuleName ?target_module_name ;	
  	omni:hasKeyword ?target_kw .
  ?recursive_module a omni:Module ;
        omni:hasModuleName ?recursive_module_name ;	
  	omni:hasInputKeyword ?kw .
  ?predecessor_module a omni:Module ;
   omni:hasModuleName ?predecessor_module_name ;
  	omni:hasKeyword+ ?kw .	
  
  filter (?target_module_name = "method_module1"^^xsd:string )
}